#!/bin/sh
set -euo pipefail

# TODO: emulate other mvi features like zooming and panning around the cover

show_covers() {
  cat <<EOF
{ "command": ["set_property", "pause", true] }
{ "command": ["set_property", "audio-display", "attachment"] }
{ "command": ["set_property", "force-window", "yes"] }
{ "command": ["video-reload", 1] }
{ "command": ["set_property", "pause", false] }
EOF
}

hide_covers() {
  cat <<EOF
{ "command": ["set_property", "force-window", "no"] }
{ "command": ["set_property", "audio-display", "no"] }
{ "command": ["video-remove", 1] }
{ "command": ["rescan-external-files"] }
EOF
}

trap 'hide_covers | nc -Uw 1 ~/.config/mpv/socket >/dev/null &' EXIT

show_covers | nc -U ~/.config/mpv/socket | (
  # retry a cmd a certain number of times (handles some race conditions in mpv)
  racy() {
    SLEEP=$1
    TRIES=$2
    for i in $(seq 0 ${TRIES}); do
      if eval "$3"; then
        break
      elif [ ${i} == ${TRIES} ]; then
        return 1
      else
       sleep ${SLEEP} || sleep 1
      fi
    done
  }

  find_mpv() {
    for p in $(pgrep -u ${UID} mpv); do
      find /proc/${p}/task/${p}/fd -type l -exec readlink '{}' + | \
      grep -Fxq "$(
        grep ~/.config/mpv/socket /proc/net/unix | cut -d' ' -f7 | \
        sed 's/^\(.*\)$/socket:[\1]/'
      )" && printf '%s\n' "${p}" || :
    done
  }

  # export so play? can use it
  export MPV_PID="${MPV_PID-$(racy 0.25 3 find_mpv)}"

  LINES=0
  while :; do

    # there is a race condition with mpv's responses over the socket. retry
    # play? a few times in case it doesn't work.
    METADATA="$(racy 0.1 3 play?)"

    # clear the old metadata from the terminal
    if [ -t 1 ] && [ "${LINES}" != "0" ]; then
        # for each line in the old metadata, clear one & move cursor up
        (yes $'\033[2K\033[1A' || :) | head -n "${LINES}" | tr -d '\n'
        # reset cursor position to beginning of line
        printf '\033[2K\r'
    fi

    if [ ! -z "${METADATA}" ]; then
      # remember how many lines we print so we can clear them later
      LINES="$(printf "%s\n" "${METADATA}" | wc -l)"
      printf "%s\n" "${METADATA}"
    fi

    # wait for a metadata update
    jq -cern '
      until(.event=="metadata-update" or .event=="shutdown" or .reason=="quit"; input) | .event == "metadata-update"
    ' >/dev/null
  done

  dd iflag=nonblock of=/dev/null status=none
)
