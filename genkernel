#!/bin/bash
set -euo pipefail

MAKEOPTS="${MAKEOPTS:-$(portageq envvar MAKEOPTS)}"
NICENESS="${NICENESS:-$(portageq envvar PORTAGE_NICENESS)}"

ORIGINAL_MAKE="$(which make)"
make() {
    "${ORIGINAL_MAKE}" "$@" "${MAKEOPTS}"
}

if [ ! -z "${NICENESS}" ]; then
    echo "Setting niceness to ${NICENESS}"
    renice "${NICENESS}" $$ > /dev/null
fi

strip_config_vars() {
    sed -n 's/^\([^#].*\)=.*$/\1/p;s/^# \(.*\) is not set$/\1/p' "$@" | sort -u
}

clean_src() {
    echo "Cleaning source directory"
    if [ -e .config ] && [ "${MRPROPER}" -ne "1" ]; then
        make clean
    else
        make mrproper
    fi
}

stderr_tee() {
    while IFS='' read -n 1 -d '' c; do
        printf '%s' "${c}"
        printf '%s' "${c}" >&2
    done
}

setup_config() {
    if [ -f .config ]; then
        echo ".config exists, we won't touch it"
    else
        if [ -e .config ]; then
            echo "wat: .config exists, but is not a regular file"
            exit 1
        else
            echo "Copying config from running kernel"
            gzip -cd /proc/config.gz > .config

            echo "Running make olddefconfig"
            if LANG="C" LC_ALL="C" make olddefconfig | stderr_tee | grep -q '^# No change to'; then
                echo "Nothing new in this config."
            else
                CONFIG_VARS="sed -n 's/^\([^#].*\)=.*$/\1/p;s/^# \(.*\) is not set$/\1/p'"

                echo "New config parameters were set to their defaults:"
                GREP_COLOR="01;32" grep -F --color=always "$(diff <(gzip -cd /proc/config.gz | strip_config_vars) <(strip_config_vars .config) | sed -n 's/^> \(.*\)$/\1/p')" .config | grep -E --color=always 'y?$'
            fi
        fi
    fi
}

set_initramfs_location() {
    echo "Fixing CONFIG_INITRAMFS_SOURCE"
    sed -i 's#^CONFIG_INITRAMFS_SOURCE=.*$#CONFIG_INITRAMFS_SOURCE="'"$1"'"#' .config
}

gen_init_cpio() {
    cd usr
    make gen_init_cpio > /dev/null
    cd ..

    FILENAME="$1"; shift
    awk '!x[$2]++' "$FILENAME" | ./usr/gen_init_cpio - "$@"
}

build_initramfs() {
    echo "Building initramfs"

    INIT_LOCATION="$(mktemp)"

    cat > "${INIT_LOCATION}" <<'EOF'
#!/bin/sh

panic() {
    echo "The kernel will panic as soon as you press Enter."
    read
}
trap panic EXIT

mount -t devtmpfs none /dev
mount -t proc none /proc
mount -t sysfs none /sys

set -euo pipefail

exec >/dev/console </dev/console 2>&1

cmdline() {
    local value
    value=" $(cat /proc/cmdline) "
    value="${value##* ${1}=}"
    value="${value%% *}"
    [ "${value}" != "" ] && echo "${value}"
}

export PATH=/bin
alias cryptsetup="cryptsetup --disable-locks"
alias mount="mount -n"

#CRYPT_ROOT="$(sed -n 's/^.*crypt_root=\([^ $]*\).*$/\1/p' /proc/cmdline)"
CRYPT_ROOT="$(cmdline crypt_root)"
if [ "$?" -ne "0" ] || [ -z "${CRYPT_ROOT}" ]; then
    echo "crypt_root was not specified on the command line."
    echo -n "Contents of /proc/cmdline: "; cat /proc/cmdline
    exit 1
fi

for _ in $(seq 20); do
    if findfs "${CRYPT_ROOT}" 2>&1 >/dev/null; then
        break
    fi

    echo "Waiting for ${CRYPT_ROOT} to show up in /dev..."
    sleep 1
done

CRYPT_ROOT_PATH="$(findfs ${CRYPT_ROOT})"
if [ "$?" -ne "0" ] || [ -z "${CRYPT_ROOT_PATH}" ]; then
    echo "${CRYPT_ROOT} does not exist."
    exit 1
fi

if ! cryptsetup isLuks "${CRYPT_ROOT_PATH}"; then
    echo "${CRYPT_ROOT_PATH} was not identified as a LUKS device."
    exit 1
fi

while ! cryptsetup luksOpen "${CRYPT_ROOT_PATH}" root; do
    echo "Could not open ${CRYPT_ROOT_PATH}. Trying again..."
done
echo "Opened ${CRYPT_ROOT_PATH} as /dev/mapper/root."

if ! mount /dev/mapper/root /mnt; then
    echo "Could not mount /dev/mapper/root."
    exit 1
fi

umount /sys
umount /proc
#umount /dev

echo "Switching to new root..."
exec switch_root /mnt /sbin/init
EOF

    OLD_TRAPS="$(trap)"
    cleanup() {
        rm -f "${INIT_LOCATION}"

        trap - RETURN
        eval "${OLD_TRAPS}"
    }
    trap cleanup RETURN

    gen_init_cpio - > "$1" <<EOF
# base layout
dir /bin 0755 0 0
dir /dev 0755 0 0
dir /mnt 0755 0 0
dir /proc 0555 0 0
dir /sys 0555 0 0
dir /tmp 1777 0 0
# busybox
file /bin/cryptsetup /sbin/cryptsetup 0755 0 0
file /bin/busybox /bin/busybox 0755 0 0
slink /bin/sh busybox 0777 0 0
file /init ${INIT_LOCATION} 0755 0 0
EOF

    cpio -itvnF "${INITRAMFS_LOCATION}" 2>/dev/null
}

build_kernel() {
    echo "Building kernel"
    make bzImage
}

usage() {
    echo "usage: genkernel [--help] [--mrproper] [--menuconfig]"
}

MENUCONFIG=0
MRPROPER=0
set +u
while :; do
    case "$1" in
    "")
        break
        ;;
    "--menuconfig")
        MENUCONFIG=1
        ;;
    "--mrproper")
        MRPROPER=1
        ;;
    "-h"|"--help")
        usage
        exit
        ;;
    *)
        usage
        exit 1
        ;;
    esac
    shift
done
set -u

cd /usr/src/linux

clean_src
setup_config

if [ "${MENUCONFIG}" -eq "1" ]; then
    make menuconfig
fi

INITRAMFS_LOCATION="$(mktemp --suffix=.cpio)"
cleanup() {
    rm -f "${INITRAMFS_LOCATION}"
}
trap cleanup EXIT

build_initramfs "${INITRAMFS_LOCATION}"
set_initramfs_location "${INITRAMFS_LOCATION}"
build_kernel "${INITRAMFS_LOCATION}"

echo "Kernel built successfully. Signing and installing."

sbsign --key /etc/efikeys/db.key --cert /etc/efikeys/db.crt --output /boot/EFI/gentoo/newkernel.efi arch/x86/boot/bzImage

cd /boot/EFI/gentoo
mv -v kernel.efi prevkernel.efi
mv -v newkernel.efi kernel.efi
