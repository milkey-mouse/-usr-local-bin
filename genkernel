#!/bin/bash
set -euo pipefail

MAKEOPTS="${MAKEOPTS:-$(portageq envvar MAKEOPTS)}"
NICENESS="${NICENESS:-$(portageq envvar PORTAGE_NICENESS || :)}"

ORIGINAL_MAKE="$(command -v make)"
make() {
    "${ORIGINAL_MAKE}" "$@" ${MAKEOPTS}
}

strip_config_vars() {
    sed -n 's/^\([^#].*\)=.*$/\1/p;s/^# \(.*\) is not set$/\1/p' "$@" | sort -u
}

clean_src() {
    printf "Cleaning source directory\n"
    if [ -e .config ] && [ "${MRPROPER}" -ne "1" ]; then
        make clean
    else
        make mrproper
    fi
}

stderr_tee() {
    while IFS='' read -n 1 -d '' c; do
        printf '%s' "${c}"
        printf '%s' "${c}" >&2
    done
}

setup_config() {
    if [ -f .config ]; then
        printf ".config exists, we won't touch it\n"
    elif [ -e .config ]; then
        printf "wat: .config exists, but is not a regular file\n"
        exit 1
    else
        printf "Copying config from running kernel\n"
        gzip -cd /proc/config.gz >.config

        printf "Running make olddefconfig\n"
        if LANG="C" LC_ALL="C" make olddefconfig | stderr_tee | grep -q '^# No change to'; then
            printf "Nothing new in this config.\n"
        else
            NEW_CONFIG_VARS="$(diff <(gzip -cd /proc/config.gz | strip_config_vars) <(strip_config_vars .config) | sed -n 's/^> \(.*\)$/\1/p' || :)"

            if [ -z "${NEW_CONFIG_VARS}" ]; then
                printf "Nothing new in this config.\n"
            else
                printf "New config parameters were set to their defaults:\n"
                GREP_COLOR="01;32" grep -F --color=always "${NEW_CONFIG_VARS}" .config | grep -E --color=always 'y?$'
            fi
        fi
    fi
}

set_initramfs_location() {
    printf "Fixing CONFIG_INITRAMFS_SOURCE\n"
    sed -i 's#^CONFIG_INITRAMFS_SOURCE=.*$#CONFIG_INITRAMFS_SOURCE="'"$1"'"#' .config
}

gen_init_cpio() {
    cd usr
    make gen_init_cpio >/dev/null
    cd ..

    FILENAME="$1"; shift
    awk '!x[$2]++' "$FILENAME" | ./usr/gen_init_cpio - "$@"
}

build_initramfs() {
    printf "Building initramfs\n"

    INIT_LOCATION="$(mktemp)"

    cat >"${INIT_LOCATION}" <<'EOF'
#!/bin/sh

panic() {
  printf "The kernel will panic as soon as you press Enter.\n"
  read
}
trap panic EXIT

mount -t proc none /proc
mount -t sysfs none /sys
mount -t devtmpfs none /dev

set -euo pipefail

exec >/dev/console </dev/console 2>&1

cmdline() {
  local value
  value=" $(cat /proc/cmdline) "
  value="${value##* ${1}=}"
  value="${value%% *}"
  [ "${value}" != "" ] && printf "%s\n" "${value}"
}

export PATH=/bin
alias cryptsetup="cryptsetup --disable-locks"
alias mount="mount -n"

CRYPT_ROOT="$(cmdline crypt_root)"
if [ "$?" -ne "0" ] || [ -z "${CRYPT_ROOT}" ]; then
  printf "crypt_root was not specified on the command line.\n"
  printf "Contents of /proc/cmdline: "; cat /proc/cmdline
  exit 1
fi

INTEGRITY_COUNT=0
for DISK in /sys/block/*; do
  for PARTITION in "/dev/${DISK#/sys/block/}"*; do
    if integritysetup open "${PARTITION}" "integrity${INTEGRITY_COUNT}" \
      --integrity hmac-sha256 --integrity-no-journal \
      --integrity-key-file /dev/zero --integrity-key-size 64 \
      --allow-discards --integrity-recovery-mode \
      2>&1 | (grep -vx 'Device .* is not a valid INTEGRITY device.' || :) >&2
    then
      printf "Opened %s as /dev/mapper/integrity%s.\n" \
        "${PARTITION}" "${INTEGRITY_COUNT}"
      INTEGRITY_COUNT=$((INTEGRITY_COUNT+1))
    fi
  done
done

mdadm --assemble --scan || :

for _ in $(seq 20); do
  if findfs "${CRYPT_ROOT}" 2>&1 >/dev/null; then
    break
  fi

  printf "Waiting for ${CRYPT_ROOT} to show up in /dev...\n"
  sleep 1
done

CRYPT_ROOT_PATH="$(findfs ${CRYPT_ROOT})"
if [ "$?" -ne "0" ] || [ -z "${CRYPT_ROOT_PATH}" ]; then
  printf "${CRYPT_ROOT} does not exist.\n"
  exit 1
fi

if ! cryptsetup isLuks "${CRYPT_ROOT_PATH}"; then
  printf "${CRYPT_ROOT_PATH} was not identified as a LUKS device.\n"
  exit 1
fi

while ! cryptsetup luksDump "${CRYPT_ROOT_PATH}" \
  --dump-volume-key --volume-key-file /tmp/volume-key \
  --batch-mode >/dev/null
do
  printf "Could not dump ${CRYPT_ROOT_PATH} volume key. Trying again...\n"
done

while ! cryptsetup luksOpen "${CRYPT_ROOT_PATH}" root \
  --volume-key-file /tmp/volume-key --allow-discards
do
  printf "Could not open ${CRYPT_ROOT_PATH}. Trying again...\n"
done
printf "Opened ${CRYPT_ROOT_PATH} as /dev/mapper/root.\n"

if [ "${INTEGRITY_COUNT}" -ne 0 ]; then
  VOLUME_KEY_FORMAT="$(wc -c </tmp/volume-key)/1 \"%02x\""
  VOLUME_KEY="$(hexdump -e "${VOLUME_KEY_FORMAT}" /tmp/volume-key)"

  for INTEGRITY in /dev/mapper/integrity*; do
    # keep only in-use dm-integrity devices
    if ! integritysetup close "${INTEGRITY}" 2>/dev/null; then
      dmsetup table "${INTEGRITY}" \
        | awk '{$7="D";print}' \
        | sed "s/0\{128\}/${VOLUME_KEY}/" \
        | dmsetup reload "${INTEGRITY}"
      dmsetup suspend "${INTEGRITY}"
      dmsetup resume "${INTEGRITY}"
    fi
  done
fi

# open any other volumes that share a volume key (yes, it's a weird setup)
for DISK in /sys/block/*; do
  for PARTITION in "/dev/${DISK#/sys/block/}"*; do
    if [ "${PARTITION}" != "${CRYPT_ROOT_PATH}" ] \
      && LABEL="$(
        cryptsetup luksDump "${PARTITION}" 2>/dev/null \
          | sed -n 's/^Label:[ \t]*\(.*\)$/\1/p' \
          | grep -Fvx '(no label)'
      )" \
      && cryptsetup luksOpen "${PARTITION}" "${LABEL}" \
        --volume-key-file /tmp/volume-key 2>/dev/null
    then
      printf "Opened %s as /dev/mapper/%s.\n" "${PARTITION}" "${LABEL}"
    fi
  done
done

rm /tmp/volume-key

if ! mount /dev/mapper/root /mnt; then
  if dmesg | grep -q 'INTEGRITY AEAD ERROR'; then
    printf "!!!!!!!!!!! AEAD integrity data failed to validate. Someone may have tampered\n"
    printf "! WARNING ! with your disk, or the system may have shut down abruptly.\n"
    printf "!!!!!!!!!!! Trust current disk contents and recompute integrity checksums? [y/N]: "
    if head -n1 | grep -Fixq -e y -e yes; then
      for INTEGRITY in /dev/mapper/integrity*; do
        # keep only in-use dm-integrity devices
        if ! integritysetup close "${INTEGRITY}" 2>/dev/null; then
          dmsetup table "${INTEGRITY}" \
            | awk '{$7="R";print}' \
            | dmsetup reload "${INTEGRITY}"
          dmsetup suspend "${INTEGRITY}"
          dmsetup resume "${INTEGRITY}"
        fi
      done
      if ! xfs_repair /dev/mapper/root; then
        printf 'xfs_repair failed; press Enter to continue'
        read
      fi
      create-snapshot root
    fi
  fi
fi

if ! cut -d' ' -f1 /proc/mounts | grep -Fxq '/dev/mapper/root' && ! mount /dev/mapper/root /mnt; then
  printf "Could not mount /dev/mapper/root.\n"
  exit 1
fi

umount /proc
umount /sys
#umount /dev

printf "Switching to new root...\n"
exec switch_root -c /dev/tty1 /mnt /sbin/init
EOF

    OLD_TRAPS="$(trap)"
    cleanup_init() {
        rm -f "${INIT_LOCATION}"

        trap - RETURN
        eval "${OLD_TRAPS}"
    }
    trap cleanup_init RETURN

    gen_init_cpio - >"$1" <<EOF
# base layout
dir /bin 0755 0 0
dir /dev 0755 0 0
dir /mnt 0755 0 0
dir /proc 0555 0 0
dir /sys 0555 0 0
dir /tmp 1777 0 0
file /bin/xfs_repair $(command -v xfs_repair.static) 0755 0 0
# device-mapper stuff
file /bin/cryptsetup $(command -v cryptsetup.static) 0755 0 0
file /bin/integritysetup $(command -v integritysetup.static) 0755 0 0
file /bin/dmsetup $(command -v dmsetup.static) 0755 0 0
file /bin/mdadm $(command -v mdadm.static) 0755 0 0
# busybox
file /bin/busybox $(command -v busybox.static) 0755 0 0
slink /bin/sh busybox 0777 0 0
file /init ${INIT_LOCATION} 0755 0 0
EOF

    cpio -itvnF "${INITRAMFS_LOCATION}" 2>/dev/null
}

build_kernel() {
    printf "Building kernel\n"
    make bzImage
}

usage() {
    printf "usage: genkernel [--help] [--noinstall] [--mrproper] [--menuconfig]\n"
}

MENUCONFIG=0
MRPROPER=0
INSTALL=1
set +u
while :; do
    case "$1" in
    "")
        break
        ;;
    "--menuconfig")
        MENUCONFIG=1
        ;;
    "--mrproper")
        MRPROPER=1
        ;;
    "--noinstall")
        INSTALL=0
        ;;
    "-h"|"--help")
        usage
        exit
        ;;
    *)
        usage
        exit 1
        ;;
    esac
    shift
done
set -u

if [ ! -z "${NICENESS}" ]; then
    printf "Setting niceness to %s\n" "${NICENESS}"
    renice "${NICENESS}" $$ >/dev/null
fi

cd /usr/src/linux

clean_src
setup_config

if [ "${MENUCONFIG}" -eq "1" ]; then
    make menuconfig
fi

INITRAMFS_LOCATION="$(mktemp --suffix=.cpio)"
cleanup() {
    rm -f "${INITRAMFS_LOCATION}"
}
trap cleanup EXIT

build_initramfs "${INITRAMFS_LOCATION}"
set_initramfs_location "${INITRAMFS_LOCATION}"
build_kernel "${INITRAMFS_LOCATION}"

if [ "${INSTALL}" -eq "1" ]; then
    printf "Kernel built successfully. Signing and installing.\n"

    sbsign --key /etc/efikeys/db.key --cert /etc/efikeys/db.crt --output /boot/EFI/gentoo/newkernel.efi arch/x86/boot/bzImage

    cd /boot/EFI/gentoo
    mv -v kernel.efi prevkernel.efi
    mv -v newkernel.efi kernel.efi
else
    printf "Kernel built successfully.\n"
fi
