#!/bin/bash
set -euo pipefail

cd ~/media/music

find_music() {
    find "$@" ! \( -type f -name 'cover.*' \) ! -path '*/.*' -print0
}

mime_types() {
    # the first few files should be added to the playlist ASAP
    # only then should we increase niceness & parallelism
    readarray -d '' -n4 files
    file -00Li "${files[@]}"

    # mapreduce in bash lol
    spawned=1
    collecting=1
    NPROC="$(nproc || echo 4)"
    TMPDIR="$(mktemp -d)"
    trap 'rm -rf "${TMPDIR}"' EXIT
    while :; do
        readarray -d '' -n32 files
        if [[ "${#files[@]}" == 0 ]]; then
            break
        fi
        #echo "spawning ${spawned}" >&2
        nice file -00Li "${files[@]}" > "${TMPDIR}/${spawned}" &
        : $((spawned++))
        if (( ${spawned} > ${NPROC} )) && (( "$(jobs -p | wc -l)" >= ${NPROC} )); then
            # if we have spawned more processes than we have cores,
            # only launch a new one in replacement of another
            wait -n
            # print (in order) the output of jobs that finished
            while ! eval jobs "%${collecting}" >/dev/null 2>&1; do
                #echo "collecting ${collecting}" >&2
                cat "${TMPDIR}/${collecting}"
                rm "${TMPDIR}/${collecting}"
                : $((collecting++))
            done
        fi
    done
    while (( ${collecting} < ${spawned} )); do
        # if the job no longer exists that just means it's completed
        eval wait "%${collecting}" 2>/dev/null || :
        #echo "collecting ${collecting}" >&2
        cat "${TMPDIR}/${collecting}"
        rm "${TMPDIR}/${collecting}"
        : $((collecting++))
    done
}

gen_playlist() {
    while IFS= read -rd '' FPATH && IFS= read -rd '' FTYPE; do
        FTYPE="${FTYPE:0:6}"
        if [[ "${FTYPE}" == "audio/" ]] || [[ "${FTYPE}" == "video/" ]]; then
            # TODO: jq needs a null-delimited lines option, for now we are using normal newlines
            printf "%s\n" "${FPATH}"
        fi
    done | jq --unbuffered -cR '{ "command": ["loadfile", ., "append-play"] }'
}

wait_for_file() {
    if command -v inotifywait >/dev/null; then
        BNAME="$(basename -z "$1" | tr -d '\0')"
        while IFS= read -r FILE && [[ "${FILE}" != "${BNAME}" ]]; do :; done < \
        <(cd "$(dirname -z "$1" | tr -d '\0')"; ls .; stdbuf -o0 inotifywait -qme create --format '%f' --monitor .)
    else
        while [[ ! -e "$1" ]]; do :; done
    fi
}

SORT=sort
FZF_FILTER_OPT="--filter"
if [[ "$#" == 0 ]]; then
    :
elif [[ "$1" == "--shuffle" ]]; then
    SORT=shuf
    shift
elif [[ "$1" == "--interactive" ]]; then
    FZF_FILTER_OPT="--query"
    shift
fi

FZF_FILTER="$(sed 's/--[^ ]*//g;s/-\([^ ]*\)/!\1/g;s/  */ /g;s/^ //;s/ $//;' <<<"$*")"
SELECTED="$(find_music | fzf --read0 --print0 ${FZF_FILTER_OPT} "${FZF_FILTER}" | cut -d '' -f1 || :)"

if [[ -z "${SELECTED}" ]]; then
    printf "No music matches the query '%s'.\n" "$*" >&2
    exit 1
fi

# start assembling the playlist as soon as we know its parameters
PLAYLIST="$(mktemp -u)"
mkfifo "${PLAYLIST}"
if [[ "${SELECTED}" == '.' ]]; then
    # we don't tell find to follow symlinks with -L here in order not to
    # more heavily weight albums with symlinks (by multiple inclusions)
    find_music | shuf -z
else
    find_music -L "${SELECTED}" | ${SORT} -z
fi | mime_types | gen_playlist > "${PLAYLIST}" &

# we really want this to be fast (inb4 then why is it written in shâ€½), so even
# though we could easily open a dummy mpv pointed at /dev/null to read its log
# output (and therefore the location of its IPC socket), let's try to find its
# existing one by parsing its logs in realtime
LOGFILE="$(mktemp -u)"
mkfifo "${LOGFILE}"
(
    IPC_SERVER_PATH="/dev/null"
    while IFS=$'\n' read -r LINE; do
        case "${LINE}" in
        "[cplayer] Setting option 'input-ipc-server' = '"*)
            IPC_SERVER_PATH="$(sed "s/^\[cplayer\] Setting option 'input-ipc-server' = '\(.*\)'\( (flags = [0-9]*)\)\{0,1\}$/\1/" <<<"${LINE}")"
            ;;
        "[global] user path: '${IPC_SERVER_PATH}' -> '"*)
            IPC_SERVER_PATH="$(sed "s/^\[global\] user path: '[^']*' -> '\(.*\)'$/\1/" <<<"${LINE}")"
            ;;
        '[ipc] Listening to IPC socket.'|'[cplayer] Done loading scripts.')
            break
            ;;
        esac
    done < <(stdbuf -i0 -o0 cut -c14- <"${LOGFILE}")
    cat <"${LOGFILE}" >/dev/null &
    trap "kill $!" EXIT
    rm "${LOGFILE}" &

    if [[ "${IPC_SERVER_PATH}" == "/dev/null" ]]; then
        # if we're here it means an IPC socket hasn't opened, so we kill mpv so
        # we can start another with an IPC socket. obviously we can't do this
        # with an IPC command, so find mpv and send it SIGINT
        pkill -SIGINT -P $$ mpv
        exit
    fi

    exec <"${PLAYLIST}"
    rm "${PLAYLIST}" &
    stdbuf -i0 -o0 nc -U "${IPC_SERVER_PATH}" >/dev/null 2>&1
) &

mpv --idle --loop-playlist $(grep -oz -- '--[^ ]*' <<<"$*" | tr '\0' ' ') \
    --log-file="${LOGFILE}"

# exit code 4 means mpv was stopped by SIGINT (or a quit keybind)
# if $PLAYLIST still exists, we never connected to the IPC socket
if [[ $? == 4 ]] && [[ -e "${PLAYLIST}" ]]; then
    IPC_SERVER_PATH="$(mktemp -u)"
    (
        wait_for_file "${IPC_SERVER_PATH}"
        trap 'rm "${PLAYLIST}" "${IPC_SERVER_PATH}"' EXIT
        exec <"${PLAYLIST}"
        rm "${PLAYLIST}" &
        stdbuf -i0 -o0 nc -U "${IPC_SERVER_PATH}" >/dev/null
    ) &
    mpv --idle --loop-playlist $(grep -oz -- '--[^ ]*' <<<"$*" | tr '\0' ' ') \
        --input-ipc-server="${IPC_SERVER_PATH}"
fi

kill -SIGINT $$
