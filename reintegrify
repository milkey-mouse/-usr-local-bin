#!/bin/sh
set -euxo pipefail

{
  if [ "$#" == 0 ] || [ "$#" == 2 ]; then
    printf "usage: reintegrify <name> [--fsck] [--sectors <S1> <S2>...]"
    exit 1
  fi

  DEVICE="$1"

  # save table layout to revert to
  TABLE="$(dmsetup table "${DEVICE}" --showkeys)"

  # bail out if unknown algorithm
  printf "%s" "${TABLE}" | grep -q "capi:authenc(hmac(sha256),.*)-plain64"

  mkdir -p "/tmp/badblocks-${DEVICE}"
  pushd "/tmp/badblocks-${DEVICE}" >/dev/null

  if [ "$#" -lt 2 ] || [ "$2" == "--fsck" ]; then
    # scan for (but don't read) bad blocks
    LAST_SCANNED="$((ls -r; echo 0) | head -n1)"
    badblocks -b 512 -s "/dev/mapper/${DEVICE}" "${LAST_SCANNED}" | xargs -r touch
  elif [ "$2" == "--sectors" ]; then
    # we are only repairing the specified broken blocks
    shift 2
    touch "$@"
  else
    exit 1
  fi

  ls

  # temporarily change device-mapper table to not verify integrity data
  # https://gitlab.com/cryptsetup/cryptsetup/-/issues/504
  KEY_LENGTH_BYTES=64
  OLD_KEY="$(printf "%s" "${TABLE}" | cut -f5 -d' ')"
  NEW_KEY="$(printf "%s" "${OLD_KEY}" | head -c$(( KEY_LENGTH_BYTES * 2 )))"

  dmsetup suspend "${DEVICE}"
  printf "%s\n" "${TABLE}" | sed \
    -e "s/capi:authenc(hmac(sha256),\(.*\))\([^ ]*\) /capi:\1\2 /" \
    -e "s/${OLD_KEY}/${NEW_KEY}/" \
    -e "s/ integrity:[^ ]*//" | \
    awk '{ $9--; print $0 }' | dmsetup reload --readonly "${DEVICE}"
  dmsetup resume "${DEVICE}"

  # read blocks with integrity disabled
  ls | xargs -rI{} -P64 dd if="/dev/mapper/${DEVICE}" of={} bs=512 skip={} count=1 iflag=direct
  sync

  # re-enable integrity checking by reloading original table
  dmsetup suspend "${DEVICE}"
  dmsetup reload "${DEVICE}" --table="${TABLE}"
  dmsetup resume "${DEVICE}"

  # write our bad blocks back out into disk, dm-integrity will recompute checksums
  ls | xargs -rI{} -P64 dd if={} of="/dev/mapper/${DEVICE}" bs=512 seek={} count=1 oflag=direct
  sync

  sleep 1

  # tear down and reactivate everything for good measure:
  # https://www.redhat.com/archives/dm-devel/2018-June/msg00150.html
  #if ! grep -q /dev/mapper/"${DEVICE}" /proc/mounts; then
  #  dmsetup remove "${DEVICE}"
  #  dmsetup create "${DEVICE}" --table="${TABLE}"
  #else
  #  dmsetup suspend "${DEVICE}"
  #  dmsetup resume "${DEVICE}"
  #fi
  dmsetup suspend "${DEVICE}"
  dmsetup table "${DEVICE}" --showkeys | dmsetup reload "${DEVICE}"
  dmsetup resume "${DEVICE}"

  popd >/dev/null
  rm -r "/tmp/badblocks-${DEVICE}"

  exit
}
