#!/bin/sh
set -euo pipefail

if [ "$#" == "0" ]; then
  pgrep -axu "${UID}" timer | grep -v "^$$" | sed 's#/.*/timer\( --bg\)*#timer#g;' | xargs -L1 sh -c 'echo "$@" "@ $(ps -q "$1" -o start | tail -n1)"' sh
  exit 0
elif [ "$1" != "--bg" ]; then
  swaymsg exec -- "$0" --bg "$@" && exit 0
else
  shift
fi

sleep_for_interval() {
  TIME="$(echo "$1" | sed 's/\([0-9]\)$/\1m/')"
  sleep "${TIME}" 2>/dev/null
}

sleep_to_date() {
  CURRENT_TIME="$(date +%s)"
  TARGET_TIME="$(date -d "$1" +%s 2>/dev/null)"
  if (( ${TARGET_TIME} < ${CURRENT_TIME} )); then
    # don't set a timer in the past!
    # the cause is likely a 12-hour format being parsed as 24.
    if echo "$1" | grep -vq 'PM$'; then
      TARGET_TIME="$(date -d "$1 PM" +%s 2>/dev/null)"
    fi
  fi
  TIME="$(( ${TARGET_TIME} - ${CURRENT_TIME} ))s"
  sleep "${TIME}"
  TIME="$1"  # for MSG
}

sleep_for_interval "$1" || sleep_to_date "$1"
shift

# TODO: swaymsg exec does not preserve TIMER_SOUND value
TIMER_SOUND="${TIMER_SOUND:-/usr/local/share/sounds/timer/ding.wav}"
if [ -f "${TIMER_SOUND}" ]; then
  aplay "${TIMER_SOUND}" &
fi

MSG="$*"
if [ -z "${MSG}" ]; then
  MSG="${TIME} timer up!"
fi
swaynag -m "${MSG}"
